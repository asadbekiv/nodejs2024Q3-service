openapi: 3.0.0
paths:
  /user:
    get:
      operationId: UsersController_getAllUsers
      parameters: []
      responses:
        '200':
          description: Successfully retrieved Users list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      summary: Gets all Users
      tags: &ref_0
        - Users
    post:
      operationId: UsersController_createUser
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Req Body does not contains required fields !
      summary: Create a new User
      tags: *ref_0
  /user/{id}:
    get:
      operationId: UsersController_getUserById
      parameters:
        - name: id
          required: true
          in: path
          description: User Id
          schema: {}
      responses:
        '200':
          description: User retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
      summary: Get user by Id
      tags: *ref_0
    put:
      operationId: UsersController_updataPassword
      parameters:
        - name: id
          required: true
          in: path
          description: User Id
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: User password updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid uuid
        '404':
          description: User not found.
      summary: Update user password
      tags: *ref_0
    delete:
      operationId: UsersController_deleteUser
      parameters:
        - name: id
          required: true
          in: path
          description: User Id
          schema: {}
      responses:
        '204':
          description: User deleted successfully.
        '400':
          description: Invail uuid.
        '404':
          description: User not found.
      summary: Delete a user
      tags: *ref_0
  /artist:
    get:
      operationId: ArtistsController_getAllArtists
      parameters: []
      responses:
        '200':
          description: Successfully retrieved Artistes list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
      summary: Get all artists.
      tags: &ref_1
        - Artists
    post:
      operationId: ArtistsController_createArtist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: Artist created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Req Body does not contains required fields !
      summary: Create a new artist.
      tags: *ref_1
  /artist/{id}:
    get:
      operationId: ArtistsController_getArtistById
      parameters:
        - name: id
          required: true
          in: path
          description: artist Id
          schema: {}
      responses:
        '200':
          description: Successfully retrieved Artists list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Req Body does not contains required fields !
        '404':
          description: Artist not found.
      summary: Get artist by Id.
      tags: *ref_1
    put:
      operationId: ArtistsController_updateArtist
      parameters:
        - name: id
          required: true
          in: path
          description: Artist Id
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateArtistDto'
      responses:
        '200':
          description: Artist update successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Invalid uuid
        '404':
          description: Artist not found.
      summary: Update artist
      tags: *ref_1
    delete:
      operationId: ArtistsController_deleteArtist
      parameters:
        - name: id
          required: true
          in: path
          description: Artist Id
          schema: {}
      responses:
        '204':
          description: Artist deleted successfully.
        '400':
          description: Invail uuid.
        '404':
          description: Artist not found.
      summary: Delete a artist
      tags: *ref_1
  /album:
    get:
      operationId: AlbumsController_getAllAlbums
      parameters: []
      responses:
        '200':
          description: Successfully retrieved Albums list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
      summary: Get all albums.
      tags: &ref_2
        - Albums
    post:
      operationId: AlbumsController_createAlbum
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: Album created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Req Body does not contains required fields !
      summary: Create a new album.
      tags: *ref_2
  /album/{id}:
    get:
      operationId: AlbumsController_getAlbumById
      parameters:
        - name: id
          required: true
          in: path
          description: album Id
          schema: {}
      responses:
        '200':
          description: Successfully retrieved Albums list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Invaild uuid
        '404':
          description: Album not found
      summary: Get album by Id.
      tags: *ref_2
    put:
      operationId: AlbumsController_updateAlbum
      parameters:
        - name: id
          required: true
          in: path
          description: Album Id
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: Album update successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Invalid uuid
        '404':
          description: Album not found.
      summary: Update album.
      tags: *ref_2
    delete:
      operationId: AlbumsController_deleteAlbum
      parameters:
        - name: id
          required: true
          in: path
          description: Album Id
          schema: {}
      responses:
        '204':
          description: Album deleted successfully.
        '400':
          description: Invail uuid.
        '404':
          description: Album not found.
      summary: Delete a album
      tags: *ref_2
  /track:
    get:
      operationId: TracksController_getAllTracks
      parameters: []
      responses:
        '200':
          description: Successfully retrieved Tracks list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
      summary: Get all tracks.
      tags: &ref_3
        - Tracks
    post:
      operationId: TracksController_createTrack
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: Track created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Req Body does not contains required fields !
      summary: Create a new track.
      tags: *ref_3
  /track/{id}:
    get:
      operationId: TracksController_getTrackById
      parameters:
        - name: id
          required: true
          in: path
          description: track Id
          schema: {}
      responses:
        '200':
          description: Successfully retrieved Track list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Req Body does not contains required fields !
        '404':
          description: Track not found.
      summary: Get track by Id.
      tags: *ref_3
    put:
      operationId: TracksController_updateTrack
      parameters:
        - name: id
          required: true
          in: path
          description: Track Id
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: Track update successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Invalid uuid
        '404':
          description: Track not found.
      summary: Update track
      tags: *ref_3
    delete:
      operationId: TracksController_deleteTrack
      parameters:
        - name: id
          required: true
          in: path
          description: Track Id
          schema: {}
      responses:
        '204':
          description: Track deleted successfully.
        '400':
          description: Invail uuid.
        '404':
          description: Track not found.
      summary: Delete a track
      tags: *ref_3
  /favs:
    get:
      operationId: FavoritesController_getAllFavorites
      parameters: []
      responses:
        '200':
          description: Successfully retrieved Favorites list
      summary: Get all favorites.
      tags: &ref_4
        - Favorites
  /favs/track/{id}:
    post:
      operationId: FavoritesController_addTrackToFavorites
      parameters:
        - name: id
          required: true
          in: path
          description: Track Id
          schema: {}
      responses:
        '201':
          description: Track added successfully.
        '400':
          description: Invaild uuid
        '422':
          description: Track does not exsist.
      summary: Add track to Favorites
      tags: *ref_4
    delete:
      operationId: FavoritesController_deleteTrackFromFavorites
      parameters:
        - name: id
          required: true
          in: path
          description: Track Id
          schema: {}
      responses:
        '204':
          description: Track deleted successfully.
        '400':
          description: Invail uuid.
        '404':
          description: Track not found.
      summary: Delete a track from Favorites
      tags: *ref_4
  /favs/album/{id}:
    post:
      operationId: FavoritesController_addAlbumToFavorites
      parameters:
        - name: id
          required: true
          in: path
          description: Album Id
          schema: {}
      responses:
        '201':
          description: Album added successfully.
        '400':
          description: Invaild uuid
        '422':
          description: Album does not exsist.
      summary: Add album to Favorites
      tags: *ref_4
    delete:
      operationId: FavoritesController_deleteAlbumFromFavorites
      parameters:
        - name: id
          required: true
          in: path
          description: Album Id
          schema: {}
      responses:
        '204':
          description: Album deleted successfully.
        '400':
          description: Invail uuid.
        '404':
          description: Album not found.
      summary: Delete a album from Favorites
      tags: *ref_4
  /favs/artist/{id}:
    post:
      operationId: FavoritesController_addArtistToFavorites
      parameters:
        - name: id
          required: true
          in: path
          description: Artist Id
          schema: {}
      responses:
        '201':
          description: Artist added successfully.
        '400':
          description: Invaild uuid
        '422':
          description: Artist does not exsist.
      summary: Add artist to Favorites
      tags: *ref_4
    delete:
      operationId: FavoritesController_deleteArtistFromFavorites
      parameters:
        - name: id
          required: true
          in: path
          description: Artist Id
          schema: {}
      responses:
        '204':
          description: Artist deleted successfully.
        '400':
          description: Invail uuid.
        '404':
          description: Artist not found.
      summary: Delete a Artist from Favorites
      tags: *ref_4
info:
  title: Your API Title
  description: Home library service API Documentation
  version: '1.0'
  contact: {}
tags:
  - name: Users
    description: ''
  - name: Artists
    description: ''
  - name: Albums
    description: ''
  - name: Tracks
    description: ''
  - name: Favorites
    description: ''
servers: []
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 98ab7e33-32c9-45bd-b4db-13430443c67f
          description: Unique identifier of the user
        login:
          type: string
          example: Magnus Carelsen
          description: User login or username
        version:
          type: number
          example: 1
          description: Version number of the user record, increments on update
        createdAt:
          type: number
          example: 1617187200000
          description: Timestamp of user creation in milliseconds
        updatedAt:
          type: number
          example: 1617187300000
          description: Timestamp of the last user update in milliseconds
        password:
          type: string
          example: test1234
          description: User password
          writeOnly: true
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
        - password
    CreateUserDto:
      type: object
      properties: {}
    UpdatePasswordDto:
      type: object
      properties: {}
    Artist:
      type: object
      properties:
        id:
          type: string
          example: b1c8d2e3-4f5a-6b7c-8d9e-0f1a2b3c4d5e
          description: Unique identifier for the artist (UUID v4)
        name:
          type: string
          example: Freddie Mercury
          description: Name of the artist
        grammy:
          type: boolean
          example: true
          description: Indicates if the artist has won a Grammy award
      required:
        - id
        - name
        - grammy
    CreateArtistDto:
      type: object
      properties: {}
    updateArtistDto:
      type: object
      properties: {}
    Album:
      type: object
      properties:
        id:
          type: string
          example: a1b2c3d4-e5f6-7g8h-9i0j-1k2l3m4n5o6p
          description: Unique identifier for the album (UUID v4)
        name:
          type: string
          example: A Night at the Opera
          description: Name of the album
        year:
          type: number
          example: 1975
          description: Release year of the album
        artistId:
          type: string
          example: b1c8d2e3-4f5a-6b7c-8d9e-0f1a2b3c4d5e
          description: Unique identifier of the artist, refers to Artist entity
          nullable: true
      required:
        - id
        - name
        - year
        - artistId
    CreateAlbumDto:
      type: object
      properties: {}
    UpdateAlbumDto:
      type: object
      properties: {}
    Track:
      type: object
      properties:
        id:
          type: string
          example: a3e1b9c3-2f2a-4d9c-8c3b-8a3b1c3d2f2a
          description: Unique identifier for the track (UUID v4)
        name:
          type: string
          example: Bohemian Rhapsody
          description: Name of the track
        artistId:
          type: string
          example: d7b5f3c5-2e4a-4b9d-8f3b-8b3d5c3d7e8a
          description: >-
            Unique 476a0a6d-0861-496d-8692-2df1b4216269identifier of the artist,
            refers to Artist entity
          nullable: true
        albumId:
          type: string
          example: e7b5f3c5-2e4a-4b9d-8f3b-8b3d5c3d7e8c
          description: Unique identifier of the album, refers to Album entity
          nullable: true
        duration:
          type: number
          example: 354
          description: Duration of the track in seconds
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    CreateTrackDto:
      type: object
      properties: {}
    UpdateTrackDto:
      type: object
      properties: {}
